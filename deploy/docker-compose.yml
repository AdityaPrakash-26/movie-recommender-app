version: "3.9"

services:
  nginx:
    image: nginx:1.27-alpine
    container_name: movie_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx:/etc/nginx/conf.d
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - client
      - server
    restart: unless-stopped

  client:
    build:
      context: ../client
      dockerfile: Dockerfile
    container_name: movie_client
    environment:
      NODE_ENV: production
    expose:
      - "3000"
    restart: unless-stopped

  server:
    build:
      context: ../server
    container_name: movie_server
    environment:
      API_KEY: ${API_KEY}
      SECRET_KEY: ${SECRET_KEY}
      DATABASE_URL: ${DATABASE_URL}
      FRONTEND_ORIGIN: ${FRONTEND_ORIGIN}
      CACHE_TYPE: ${CACHE_TYPE}
      CACHE_REDIS_URL: ${CACHE_REDIS_URL}
      COGNITO_REGION: ${COGNITO_REGION}
      COGNITO_USER_POOL_ID: ${COGNITO_USER_POOL_ID}
      COGNITO_CLIENT_ID: ${COGNITO_CLIENT_ID}
      COGNITO_CLIENT_SECRET: ${COGNITO_CLIENT_SECRET}
      COGNITO_DOMAIN: ${COGNITO_DOMAIN}
      # Ensure 'profile' scope is requested so 'name' appears in ID token
      COGNITO_SCOPE: ${COGNITO_SCOPE}
      COGNITO_REDIRECT_URI: ${COGNITO_REDIRECT_URI}
      COGNITO_LOGOUT_REDIRECT_URI: ${COGNITO_LOGOUT_REDIRECT_URI}
      SESSION_COOKIE_NAME: ${SESSION_COOKIE_NAME}
      SESSION_TTL_SECS: ${SESSION_TTL_SECS}
      PORT: 8080
    expose:
      - "8080"
    depends_on:
      - db
      - redis
    restart: unless-stopped

  db:
    image: postgres:17
    container_name: movie_db
    environment:
      POSTGRES_USER: movie_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: movie_db
    volumes:
      - db_data:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:7-alpine
    container_name: movie_redis
    command: ["redis-server", "--appendonly", "yes"]
    volumes:
      - redis_data:/data
    restart: unless-stopped

  certbot:
    image: certbot/certbot:latest
    container_name: movie_certbot
    volumes:
      - ./certbot/www:/var/www/certbot
      - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - nginx
    # No long-running command; used for on-demand issuance and renewals
    entrypoint: ["/bin/sh", "-c", "sleep infinity"]

volumes:
  db_data:
  redis_data:
